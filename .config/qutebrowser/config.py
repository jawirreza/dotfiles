# Autogenerated config.py
# Documentation:
#   qute://help/configuring.html
#   qute://help/settings.html

# load plugin
from xresources import read_xresources
xresources = read_xresources("*")

# Uncomment this to still load settings configured via autoconfig.yml
# config.load_autoconfig()

# Aliases for commands. The keys of the given dictionary are the
# aliases, while the values are the commands they map to.
# Type: Dict
c.aliases = {'q': 'close', 'qa': 'quit', 'w': 'session-save', 'wq': 'quit --save', 'wqa': 'quit --save'}

# Enable JavaScript.
# Type: Bool
config.set('content.javascript.enabled', True, 'file://*')

# Enable JavaScript.
# Type: Bool
config.set('content.javascript.enabled', True, 'chrome://*/*')

# Enable JavaScript.
# Type: Bool
config.set('content.javascript.enabled', True, 'qute://*/*')

# Editor (and arguments) to use for the `open-editor` command. The
# following placeholders are defined: * `{file}`: Filename of the file
# to be edited. * `{line}`: Line in which the caret is found in the
# text. * `{column}`: Column in which the caret is found in the text. *
# `{line0}`: Same as `{line}`, but starting from index 0. * `{column0}`:
# Same as `{column}`, but starting from index 0.
# Type: ShellCommand
c.editor.command = ['st', '-e', 'nvim', '{file}']

# Open new tabs (middleclick/ctrl+click) in the background.
# Type: Bool
c.tabs.background = True

# Padding (in pixels) around text for tabs.
# Type: Padding
c.tabs.padding = {'bottom': 2, 'left': 5, 'right': 5, 'top': 3}

# Position of the tab bar.
# Type: Position
# Valid values:
#   - top
#   - bottom
#   - left
#   - right
c.tabs.position = 'bottom'

# Alignment of the text inside of tabs.
# Type: TextAlignment
# Valid values:
#   - left
#   - right
#   - center
c.tabs.title.alignment = 'center'

# Format to use for the tab title. The following placeholders are
# defined:  * `{perc}`: Percentage as a string like `[10%]`. *
# `{perc_raw}`: Raw percentage, e.g. `10`. * `{title}`: Title of the
# current web page. * `{title_sep}`: The string ` - ` if a title is set,
# empty otherwise. * `{index}`: Index of this tab. * `{id}`: Internal
# tab ID of this tab. * `{scroll_pos}`: Page scroll position. *
# `{host}`: Host of the current web page. * `{backend}`: Either
# ''webkit'' or ''webengine'' * `{private}`: Indicates when private mode
# is enabled. * `{current_url}`: URL of the current web page. *
# `{protocol}`: Protocol (http/https/...) of the current web page. *
# `{audio}`: Indicator for audio/mute status.
# Type: FormatString
c.tabs.title.format = '{audio}{index}: {title}'

# Padding (in pixels) for tab indicators.
# Type: Padding
c.tabs.indicator.padding = {'bottom': 2, 'left': 0, 'right': 4, 'top': 2}

# Page to open if :open -t/-b/-w is used without URL. Use `about:blank`
# for a blank page.
# Type: FuzzyUrl
c.url.default_page = 'about:blank'

# Search engines which can be used via the address bar. Maps a search
# engine name (such as `DEFAULT`, or `ddg`) to a URL with a `{}`
# placeholder. The placeholder will be replaced by the search term, use
# `{{` and `}}` for literal `{`/`}` signs. The search engine named
# `DEFAULT` is used when `url.auto_search` is turned on and something
# else than a URL was entered to be opened. Other search engines can be
# used by prepending the search engine name to the search term, e.g.
# `:open google qutebrowser`.
# Type: Dict
c.url.searchengines = {'DEFAULT': 'https://www.google.com/search?hl=en&q={}', 'd': 'https://duckduckgo.com/?q={}', 'wa': 'https://wiki.archlinux.org/?search={}', 'y': 'https://www.youtube.com/results?search_query={}'}

# Page(s) to open at the start.
# Type: List of FuzzyUrl, or FuzzyUrl
c.url.start_pages = 'about:blank'

# Background color of the completion widget for odd rows.
# Type: QssColor
c.colors.completion.odd.bg = xresources["*color0"]

# Background color of the completion widget category headers.
# Type: QssColor
c.colors.completion.category.bg = 'qlineargradient(x1:0, y1:0, x2:0, y2:1, stop:0 #888888, stop:1 #505050)'

# Top border color of the completion widget category headers.
# Type: QssColor
c.colors.completion.category.border.top = xresources["*color0"]

# Bottom border color of the completion widget category headers.
# Type: QssColor
c.colors.completion.category.border.bottom = xresources["*color0"]

# Foreground color of the selected completion item.
# Type: QtColor
c.colors.completion.item.selected.fg = xresources["*color0"]

# Background color of the selected completion item.
# Type: QssColor
c.colors.completion.item.selected.bg = xresources["*color3"]

# Top border color of the completion widget category headers.
# Type: QssColor
c.colors.completion.item.selected.border.top = xresources["*color3"]

# Bottom border color of the selected completion item.
# Type: QssColor
c.colors.completion.item.selected.border.bottom = xresources["*color3"]

# Foreground color of the matched text in the completion.
# Type: QtColor
c.colors.completion.match.fg = xresources["*color3"]

# Color of the scrollbar handle in the completion view.
# Type: QssColor
c.colors.completion.scrollbar.fg = xresources["*color3"]

# Color of the scrollbar in the completion view.
# Type: QssColor
c.colors.completion.scrollbar.bg = xresources["*color0"]

# Background color for the download bar.
# Type: QssColor
c.colors.downloads.bar.bg = xresources["*color0"]

# Font color for hints.
# Type: QssColor
c.colors.hints.fg = xresources["*color0"]

# Foreground color of a warning message.
# Type: QssColor
c.colors.messages.warning.fg = xresources["*color0"]

# Border used around UI elements in prompts.
# Type: String
c.colors.prompts.border = '1px solid #282828'

# Background color for the selected item in filename prompts.
# Type: QssColor
c.colors.prompts.selected.bg = xresources["*color3"]

# Background color of the statusbar.
# Type: QssColor
c.colors.statusbar.normal.bg = xresources["*color0"]

# Foreground color of the statusbar in command mode.
# Type: QssColor
c.colors.statusbar.command.fg = xresources["*color15"]

# Background color of the statusbar in command mode.
# Type: QssColor
c.colors.statusbar.command.bg = xresources["*color0"]

# Background color of the statusbar in private browsing + command mode.
# Type: QssColor
c.colors.statusbar.command.private.bg = xresources["*color0"]

# Background color of the statusbar in caret mode with a selection.
# Type: QssColor
c.colors.statusbar.caret.selection.bg = xresources["*color8"]

# Background color of the tab bar.
# Type: QtColor
c.colors.tabs.bar.bg = xresources["*color0"]

# Foreground color of unselected odd tabs.
# Type: QtColor
c.colors.tabs.odd.fg = xresources["*color15"]

# Background color of unselected odd tabs.
# Type: QtColor
c.colors.tabs.odd.bg = xresources["*color0"]

# Foreground color of unselected even tabs.
# Type: QtColor
c.colors.tabs.even.fg = xresources["*color15"]

# Background color of unselected even tabs.
# Type: QtColor
c.colors.tabs.even.bg = xresources["*color0"]

# Foreground color of selected odd tabs.
# Type: QtColor
c.colors.tabs.selected.odd.fg = xresources["*color0"]

# Background color of selected odd tabs.
# Type: QtColor
c.colors.tabs.selected.odd.bg = xresources["*color3"]

# Foreground color of selected even tabs.
# Type: QtColor
c.colors.tabs.selected.even.fg = xresources["*color0"]

# Background color of selected even tabs.
# Type: QtColor
c.colors.tabs.selected.even.bg = xresources["*color3"]
